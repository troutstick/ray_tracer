<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="1921"><g><title>perf (6 samples, 0.31%)</title><rect x="0.0000%" y="805" width="0.3123%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="789" width="0.3123%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="799.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="773" width="0.3123%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="783.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="757" width="0.3123%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="741" width="0.3123%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="725" width="0.3123%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="709" width="0.3123%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="693" width="0.3123%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="703.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="677" width="0.3123%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="661" width="0.3123%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="645" width="0.3123%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="629" width="0.3123%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="0.0000%" y="613" width="0.3123%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3123%" y="773" width="0.0521%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="1"/><text x="0.5623%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3123%" y="757" width="0.0521%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="1"/><text x="0.5623%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3123%" y="741" width="0.0521%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="1"/><text x="0.5623%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3123%" y="725" width="0.0521%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="0.5623%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3123%" y="709" width="0.0521%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="0.5623%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3123%" y="693" width="0.0521%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.5623%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3123%" y="677" width="0.0521%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="0.5623%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3123%" y="661" width="0.0521%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="0.5623%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3123%" y="645" width="0.0521%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="0.5623%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3123%" y="629" width="0.0521%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="0.5623%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.3123%" y="613" width="0.0521%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="0.5623%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.10%)</title><rect x="0.3644%" y="565" width="0.1041%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="2"/><text x="0.6144%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.10%)</title><rect x="0.3644%" y="549" width="0.1041%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="2"/><text x="0.6144%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.10%)</title><rect x="0.3644%" y="533" width="0.1041%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="2"/><text x="0.6144%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="0.4164%" y="517" width="0.0521%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="1"/><text x="0.6664%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="0.4164%" y="501" width="0.0521%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="0.6664%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write (3 samples, 0.16%)</title><rect x="0.3644%" y="581" width="0.1562%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="3"/><text x="0.6144%" y="591.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.05%)</title><rect x="0.4685%" y="565" width="0.0521%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="1"/><text x="0.7185%" y="575.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.05%)</title><rect x="0.4685%" y="549" width="0.0521%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="1"/><text x="0.7185%" y="559.50"></text></g><g><title>std::sys::unix::fs::File::write (1 samples, 0.05%)</title><rect x="0.4685%" y="533" width="0.0521%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="1"/><text x="0.7185%" y="543.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.05%)</title><rect x="0.4685%" y="517" width="0.0521%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="1"/><text x="0.7185%" y="527.50"></text></g><g><title>__libc_write (1 samples, 0.05%)</title><rect x="0.4685%" y="501" width="0.0521%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="1"/><text x="0.7185%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="485" width="0.0521%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="0.7185%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="469" width="0.0521%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="1"/><text x="0.7185%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="453" width="0.0521%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="1"/><text x="0.7185%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="437" width="0.0521%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="0.7185%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="421" width="0.0521%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="0.7185%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="405" width="0.0521%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="0.7185%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="389" width="0.0521%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="1"/><text x="0.7185%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="373" width="0.0521%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="1"/><text x="0.7185%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="357" width="0.0521%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="1"/><text x="0.7185%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="341" width="0.0521%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="1"/><text x="0.7185%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="325" width="0.0521%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="1"/><text x="0.7185%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="309" width="0.0521%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="1"/><text x="0.7185%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="293" width="0.0521%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="1"/><text x="0.7185%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="0.4685%" y="277" width="0.0521%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="1"/><text x="0.7185%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1 samples, 0.05%)</title><rect x="0.7808%" y="373" width="0.0521%" height="15" fill="rgb(206,27,48)" fg:x="15" fg:w="1"/><text x="1.0308%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (1 samples, 0.05%)</title><rect x="0.8329%" y="373" width="0.0521%" height="15" fill="rgb(225,35,8)" fg:x="16" fg:w="1"/><text x="1.0829%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 0.36%)</title><rect x="0.7288%" y="437" width="0.3644%" height="15" fill="rgb(250,213,24)" fg:x="14" fg:w="7"/><text x="0.9788%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.31%)</title><rect x="0.7808%" y="421" width="0.3123%" height="15" fill="rgb(247,123,22)" fg:x="15" fg:w="6"/><text x="1.0308%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.31%)</title><rect x="0.7808%" y="405" width="0.3123%" height="15" fill="rgb(231,138,38)" fg:x="15" fg:w="6"/><text x="1.0308%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.31%)</title><rect x="0.7808%" y="389" width="0.3123%" height="15" fill="rgb(231,145,46)" fg:x="15" fg:w="6"/><text x="1.0308%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.21%)</title><rect x="0.8850%" y="373" width="0.2082%" height="15" fill="rgb(251,118,11)" fg:x="17" fg:w="4"/><text x="1.1350%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.16%)</title><rect x="0.9370%" y="357" width="0.1562%" height="15" fill="rgb(217,147,25)" fg:x="18" fg:w="3"/><text x="1.1870%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.16%)</title><rect x="0.9370%" y="341" width="0.1562%" height="15" fill="rgb(247,81,37)" fg:x="18" fg:w="3"/><text x="1.1870%" y="351.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.16%)</title><rect x="0.9370%" y="325" width="0.1562%" height="15" fill="rgb(209,12,38)" fg:x="18" fg:w="3"/><text x="1.1870%" y="335.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.16%)</title><rect x="0.9370%" y="309" width="0.1562%" height="15" fill="rgb(227,1,9)" fg:x="18" fg:w="3"/><text x="1.1870%" y="319.50"></text></g><g><title>_int_realloc (1 samples, 0.05%)</title><rect x="1.0411%" y="293" width="0.0521%" height="15" fill="rgb(248,47,43)" fg:x="20" fg:w="1"/><text x="1.2911%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 0.57%)</title><rect x="0.6247%" y="533" width="0.5726%" height="15" fill="rgb(221,10,30)" fg:x="12" fg:w="11"/><text x="0.8747%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (9 samples, 0.47%)</title><rect x="0.7288%" y="517" width="0.4685%" height="15" fill="rgb(210,229,1)" fg:x="14" fg:w="9"/><text x="0.9788%" y="527.50"></text></g><g><title>alloc::string::String::push_str (9 samples, 0.47%)</title><rect x="0.7288%" y="501" width="0.4685%" height="15" fill="rgb(222,148,37)" fg:x="14" fg:w="9"/><text x="0.9788%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (9 samples, 0.47%)</title><rect x="0.7288%" y="485" width="0.4685%" height="15" fill="rgb(234,67,33)" fg:x="14" fg:w="9"/><text x="0.9788%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.47%)</title><rect x="0.7288%" y="469" width="0.4685%" height="15" fill="rgb(247,98,35)" fg:x="14" fg:w="9"/><text x="0.9788%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9 samples, 0.47%)</title><rect x="0.7288%" y="453" width="0.4685%" height="15" fill="rgb(247,138,52)" fg:x="14" fg:w="9"/><text x="0.9788%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.10%)</title><rect x="1.0932%" y="437" width="0.1041%" height="15" fill="rgb(213,79,30)" fg:x="21" fg:w="2"/><text x="1.3432%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.05%)</title><rect x="1.1452%" y="421" width="0.0521%" height="15" fill="rgb(246,177,23)" fg:x="22" fg:w="1"/><text x="1.3952%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.21%)</title><rect x="1.3014%" y="405" width="0.2082%" height="15" fill="rgb(230,62,27)" fg:x="25" fg:w="4"/><text x="1.5514%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.21%)</title><rect x="1.3014%" y="389" width="0.2082%" height="15" fill="rgb(216,154,8)" fg:x="25" fg:w="4"/><text x="1.5514%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.21%)</title><rect x="1.3014%" y="373" width="0.2082%" height="15" fill="rgb(244,35,45)" fg:x="25" fg:w="4"/><text x="1.5514%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.21%)</title><rect x="1.3014%" y="357" width="0.2082%" height="15" fill="rgb(251,115,12)" fg:x="25" fg:w="4"/><text x="1.5514%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.21%)</title><rect x="1.3014%" y="341" width="0.2082%" height="15" fill="rgb(240,54,50)" fg:x="25" fg:w="4"/><text x="1.5514%" y="351.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.21%)</title><rect x="1.3014%" y="325" width="0.2082%" height="15" fill="rgb(233,84,52)" fg:x="25" fg:w="4"/><text x="1.5514%" y="335.50"></text></g><g><title>tcache_get (3 samples, 0.16%)</title><rect x="1.3535%" y="309" width="0.1562%" height="15" fill="rgb(207,117,47)" fg:x="26" fg:w="3"/><text x="1.6035%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.05%)</title><rect x="1.5096%" y="389" width="0.0521%" height="15" fill="rgb(249,43,39)" fg:x="29" fg:w="1"/><text x="1.7596%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.36%)</title><rect x="1.2493%" y="501" width="0.3644%" height="15" fill="rgb(209,38,44)" fg:x="24" fg:w="7"/><text x="1.4993%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (7 samples, 0.36%)</title><rect x="1.2493%" y="485" width="0.3644%" height="15" fill="rgb(236,212,23)" fg:x="24" fg:w="7"/><text x="1.4993%" y="495.50"></text></g><g><title>alloc::string::String::push_str (7 samples, 0.36%)</title><rect x="1.2493%" y="469" width="0.3644%" height="15" fill="rgb(242,79,21)" fg:x="24" fg:w="7"/><text x="1.4993%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (7 samples, 0.36%)</title><rect x="1.2493%" y="453" width="0.3644%" height="15" fill="rgb(211,96,35)" fg:x="24" fg:w="7"/><text x="1.4993%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.36%)</title><rect x="1.2493%" y="437" width="0.3644%" height="15" fill="rgb(253,215,40)" fg:x="24" fg:w="7"/><text x="1.4993%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7 samples, 0.36%)</title><rect x="1.2493%" y="421" width="0.3644%" height="15" fill="rgb(211,81,21)" fg:x="24" fg:w="7"/><text x="1.4993%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.10%)</title><rect x="1.5096%" y="405" width="0.1041%" height="15" fill="rgb(208,190,38)" fg:x="29" fg:w="2"/><text x="1.7596%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="1.5617%" y="389" width="0.0521%" height="15" fill="rgb(235,213,38)" fg:x="30" fg:w="1"/><text x="1.8117%" y="399.50"></text></g><g><title>core::fmt::Formatter::pad_integral (6 samples, 0.31%)</title><rect x="1.6137%" y="501" width="0.3123%" height="15" fill="rgb(237,122,38)" fg:x="31" fg:w="6"/><text x="1.8637%" y="511.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.10%)</title><rect x="1.8220%" y="485" width="0.1041%" height="15" fill="rgb(244,218,35)" fg:x="35" fg:w="2"/><text x="2.0720%" y="495.50"></text></g><g><title>alloc::fmt::format (28 samples, 1.46%)</title><rect x="0.5206%" y="581" width="1.4576%" height="15" fill="rgb(240,68,47)" fg:x="10" fg:w="28"/><text x="0.7706%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (28 samples, 1.46%)</title><rect x="0.5206%" y="565" width="1.4576%" height="15" fill="rgb(210,16,53)" fg:x="10" fg:w="28"/><text x="0.7706%" y="575.50"></text></g><g><title>core::fmt::write (28 samples, 1.46%)</title><rect x="0.5206%" y="549" width="1.4576%" height="15" fill="rgb(235,124,12)" fg:x="10" fg:w="28"/><text x="0.7706%" y="559.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (15 samples, 0.78%)</title><rect x="1.1973%" y="533" width="0.7808%" height="15" fill="rgb(224,169,11)" fg:x="23" fg:w="15"/><text x="1.4473%" y="543.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (14 samples, 0.73%)</title><rect x="1.2493%" y="517" width="0.7288%" height="15" fill="rgb(250,166,2)" fg:x="24" fg:w="14"/><text x="1.4993%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="1.9261%" y="501" width="0.0521%" height="15" fill="rgb(242,216,29)" fg:x="37" fg:w="1"/><text x="2.1761%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.05%)</title><rect x="1.9781%" y="581" width="0.0521%" height="15" fill="rgb(230,116,27)" fg:x="38" fg:w="1"/><text x="2.2281%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.05%)</title><rect x="1.9781%" y="565" width="0.0521%" height="15" fill="rgb(228,99,48)" fg:x="38" fg:w="1"/><text x="2.2281%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.05%)</title><rect x="1.9781%" y="549" width="0.0521%" height="15" fill="rgb(253,11,6)" fg:x="38" fg:w="1"/><text x="2.2281%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="1.9781%" y="533" width="0.0521%" height="15" fill="rgb(247,143,39)" fg:x="38" fg:w="1"/><text x="2.2281%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.05%)</title><rect x="1.9781%" y="517" width="0.0521%" height="15" fill="rgb(236,97,10)" fg:x="38" fg:w="1"/><text x="2.2281%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.05%)</title><rect x="1.9781%" y="501" width="0.0521%" height="15" fill="rgb(233,208,19)" fg:x="38" fg:w="1"/><text x="2.2281%" y="511.50"></text></g><g><title>__GI___libc_free (1 samples, 0.05%)</title><rect x="1.9781%" y="485" width="0.0521%" height="15" fill="rgb(216,164,2)" fg:x="38" fg:w="1"/><text x="2.2281%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (1 samples, 0.05%)</title><rect x="9.4222%" y="149" width="0.0521%" height="15" fill="rgb(220,129,5)" fg:x="181" fg:w="1"/><text x="9.6722%" y="159.50"></text></g><g><title>ray_tracer::Camera::intersects_triangle::{{closure}} (1 samples, 0.05%)</title><rect x="9.4222%" y="133" width="0.0521%" height="15" fill="rgb(242,17,10)" fg:x="181" fg:w="1"/><text x="9.6722%" y="143.50"></text></g><g><title>ray_tracer::Vector::slow_intersect_check (1 samples, 0.05%)</title><rect x="9.4222%" y="117" width="0.0521%" height="15" fill="rgb(242,107,0)" fg:x="181" fg:w="1"/><text x="9.6722%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (39 samples, 2.03%)</title><rect x="10.8277%" y="117" width="2.0302%" height="15" fill="rgb(251,28,31)" fg:x="208" fg:w="39"/><text x="11.0777%" y="127.50">&lt;..</text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::{{closure}} (131 samples, 6.82%)</title><rect x="6.7153%" y="181" width="6.8194%" height="15" fill="rgb(233,223,10)" fg:x="129" fg:w="131"/><text x="6.9653%" y="191.50">core::ite..</text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (131 samples, 6.82%)</title><rect x="6.7153%" y="165" width="6.8194%" height="15" fill="rgb(215,21,27)" fg:x="129" fg:w="131"/><text x="6.9653%" y="175.50">core::ite..</text></g><g><title>ray_tracer::Camera::intersects_triangle::{{closure}} (78 samples, 4.06%)</title><rect x="9.4742%" y="149" width="4.0604%" height="15" fill="rgb(232,23,21)" fg:x="182" fg:w="78"/><text x="9.7242%" y="159.50">ray_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (52 samples, 2.71%)</title><rect x="10.8277%" y="133" width="2.7069%" height="15" fill="rgb(244,5,23)" fg:x="208" fg:w="52"/><text x="11.0777%" y="143.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.68%)</title><rect x="12.8579%" y="117" width="0.6767%" height="15" fill="rgb(226,81,46)" fg:x="247" fg:w="13"/><text x="13.1079%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.68%)</title><rect x="12.8579%" y="101" width="0.6767%" height="15" fill="rgb(247,70,30)" fg:x="247" fg:w="13"/><text x="13.1079%" y="111.50"></text></g><g><title>ray_tracer::Plane::normal (16 samples, 0.83%)</title><rect x="19.0005%" y="133" width="0.8329%" height="15" fill="rgb(212,68,19)" fg:x="365" fg:w="16"/><text x="19.2505%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (282 samples, 14.68%)</title><rect x="5.7262%" y="213" width="14.6799%" height="15" fill="rgb(240,187,13)" fg:x="110" fg:w="282"/><text x="5.9762%" y="223.50">&lt;core::iter::adapters:..</text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (271 samples, 14.11%)</title><rect x="6.2988%" y="197" width="14.1072%" height="15" fill="rgb(223,113,26)" fg:x="121" fg:w="271"/><text x="6.5488%" y="207.50">core::iter::adapters:..</text></g><g><title>ray_tracer::Camera::intersects_triangle::{{closure}} (132 samples, 6.87%)</title><rect x="13.5346%" y="181" width="6.8714%" height="15" fill="rgb(206,192,2)" fg:x="260" fg:w="132"/><text x="13.7846%" y="191.50">ray_trace..</text></g><g><title>ray_tracer::Camera::iterate_over_rays::{{closure}}::{{closure}} (128 samples, 6.66%)</title><rect x="13.7428%" y="165" width="6.6632%" height="15" fill="rgb(241,108,4)" fg:x="264" fg:w="128"/><text x="13.9928%" y="175.50">ray_trace..</text></g><g><title>ray_tracer::Plane::intersection (128 samples, 6.66%)</title><rect x="13.7428%" y="149" width="6.6632%" height="15" fill="rgb(247,173,49)" fg:x="264" fg:w="128"/><text x="13.9928%" y="159.50">ray_trace..</text></g><g><title>ray_tracer::Vector::dot_product (11 samples, 0.57%)</title><rect x="19.8334%" y="133" width="0.5726%" height="15" fill="rgb(224,114,35)" fg:x="381" fg:w="11"/><text x="20.0834%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.36%)</title><rect x="20.4060%" y="213" width="0.3644%" height="15" fill="rgb(245,159,27)" fg:x="392" fg:w="7"/><text x="20.6560%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (360 samples, 18.74%)</title><rect x="2.0822%" y="357" width="18.7402%" height="15" fill="rgb(245,172,44)" fg:x="40" fg:w="360"/><text x="2.3322%" y="367.50">core::iter::adapters::map::ma..</text></g><g><title>ray_tracer::Camera::iterate_over_rays::{{closure}} (360 samples, 18.74%)</title><rect x="2.0822%" y="341" width="18.7402%" height="15" fill="rgb(236,23,11)" fg:x="40" fg:w="360"/><text x="2.3322%" y="351.50">ray_tracer::Camera::iterate_o..</text></g><g><title>ray_tracer::Camera::intersects_triangle (360 samples, 18.74%)</title><rect x="2.0822%" y="325" width="18.7402%" height="15" fill="rgb(205,117,38)" fg:x="40" fg:w="360"/><text x="2.3322%" y="335.50">ray_tracer::Camera::intersect..</text></g><g><title>core::iter::traits::iterator::Iterator::any (360 samples, 18.74%)</title><rect x="2.0822%" y="309" width="18.7402%" height="15" fill="rgb(237,72,25)" fg:x="40" fg:w="360"/><text x="2.3322%" y="319.50">core::iter::traits::iterator:..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (360 samples, 18.74%)</title><rect x="2.0822%" y="293" width="18.7402%" height="15" fill="rgb(244,70,9)" fg:x="40" fg:w="360"/><text x="2.3322%" y="303.50">&lt;core::iter::adapters::filter..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (360 samples, 18.74%)</title><rect x="2.0822%" y="277" width="18.7402%" height="15" fill="rgb(217,125,39)" fg:x="40" fg:w="360"/><text x="2.3322%" y="287.50">&lt;core::iter::adapters::filter..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (360 samples, 18.74%)</title><rect x="2.0822%" y="261" width="18.7402%" height="15" fill="rgb(235,36,10)" fg:x="40" fg:w="360"/><text x="2.3322%" y="271.50">&lt;core::iter::adapters::map::M..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (360 samples, 18.74%)</title><rect x="2.0822%" y="245" width="18.7402%" height="15" fill="rgb(251,123,47)" fg:x="40" fg:w="360"/><text x="2.3322%" y="255.50">&lt;core::iter::adapters::enumer..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (360 samples, 18.74%)</title><rect x="2.0822%" y="229" width="18.7402%" height="15" fill="rgb(221,13,13)" fg:x="40" fg:w="360"/><text x="2.3322%" y="239.50">core::iter::traits::iterator:..</text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.7704%" y="213" width="0.0521%" height="15" fill="rgb(238,131,9)" fg:x="399" fg:w="1"/><text x="21.0204%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.7704%" y="197" width="0.0521%" height="15" fill="rgb(211,50,8)" fg:x="399" fg:w="1"/><text x="21.0204%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.7704%" y="181" width="0.0521%" height="15" fill="rgb(245,182,24)" fg:x="399" fg:w="1"/><text x="21.0204%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.7704%" y="165" width="0.0521%" height="15" fill="rgb(242,14,37)" fg:x="399" fg:w="1"/><text x="21.0204%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.7704%" y="149" width="0.0521%" height="15" fill="rgb(246,228,12)" fg:x="399" fg:w="1"/><text x="21.0204%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.7704%" y="133" width="0.0521%" height="15" fill="rgb(213,55,15)" fg:x="399" fg:w="1"/><text x="21.0204%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.7704%" y="117" width="0.0521%" height="15" fill="rgb(209,9,3)" fg:x="399" fg:w="1"/><text x="21.0204%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.7704%" y="101" width="0.0521%" height="15" fill="rgb(230,59,30)" fg:x="399" fg:w="1"/><text x="21.0204%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="20.7704%" y="85" width="0.0521%" height="15" fill="rgb(209,121,21)" fg:x="399" fg:w="1"/><text x="21.0204%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="31.0255%" y="229" width="0.0521%" height="15" fill="rgb(220,109,13)" fg:x="596" fg:w="1"/><text x="31.2755%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="31.0255%" y="213" width="0.0521%" height="15" fill="rgb(232,18,1)" fg:x="596" fg:w="1"/><text x="31.2755%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="31.0255%" y="197" width="0.0521%" height="15" fill="rgb(215,41,42)" fg:x="596" fg:w="1"/><text x="31.2755%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="31.0255%" y="181" width="0.0521%" height="15" fill="rgb(224,123,36)" fg:x="596" fg:w="1"/><text x="31.2755%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="31.0255%" y="165" width="0.0521%" height="15" fill="rgb(240,125,3)" fg:x="596" fg:w="1"/><text x="31.2755%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="31.0255%" y="149" width="0.0521%" height="15" fill="rgb(205,98,50)" fg:x="596" fg:w="1"/><text x="31.2755%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="213" width="0.3123%" height="15" fill="rgb(205,185,37)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="197" width="0.3123%" height="15" fill="rgb(238,207,15)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="181" width="0.3123%" height="15" fill="rgb(213,199,42)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="165" width="0.3123%" height="15" fill="rgb(235,201,11)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="149" width="0.3123%" height="15" fill="rgb(207,46,11)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="133" width="0.3123%" height="15" fill="rgb(241,35,35)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="117" width="0.3123%" height="15" fill="rgb(243,32,47)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="101" width="0.3123%" height="15" fill="rgb(247,202,23)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="111.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="85" width="0.3123%" height="15" fill="rgb(219,102,11)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="95.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="69" width="0.3123%" height="15" fill="rgb(243,110,44)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="79.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="53" width="0.3123%" height="15" fill="rgb(222,74,54)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="63.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="66.9964%" y="37" width="0.3123%" height="15" fill="rgb(216,99,12)" fg:x="1287" fg:w="6"/><text x="67.2464%" y="47.50"></text></g><g><title>&lt;ray_tracer::Vector as core::ops::arith::Sub&gt;::sub (1 samples, 0.05%)</title><rect x="88.3915%" y="165" width="0.0521%" height="15" fill="rgb(226,22,26)" fg:x="1698" fg:w="1"/><text x="88.6415%" y="175.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 0.10%)</title><rect x="88.3915%" y="197" width="0.1041%" height="15" fill="rgb(217,163,10)" fg:x="1698" fg:w="2"/><text x="88.6415%" y="207.50"></text></g><g><title>ray_tracer::Camera::closest_triangle_index::{{closure}} (2 samples, 0.10%)</title><rect x="88.3915%" y="181" width="0.1041%" height="15" fill="rgb(213,25,53)" fg:x="1698" fg:w="2"/><text x="88.6415%" y="191.50"></text></g><g><title>ray_tracer::Vector::slow_intersect_check (1 samples, 0.05%)</title><rect x="88.4435%" y="165" width="0.0521%" height="15" fill="rgb(252,105,26)" fg:x="1699" fg:w="1"/><text x="88.6935%" y="175.50"></text></g><g><title>ray_tracer::Vector::same_side (1 samples, 0.05%)</title><rect x="88.4435%" y="149" width="0.0521%" height="15" fill="rgb(220,39,43)" fg:x="1699" fg:w="1"/><text x="88.6935%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17 samples, 0.88%)</title><rect x="88.4956%" y="181" width="0.8850%" height="15" fill="rgb(229,68,48)" fg:x="1700" fg:w="17"/><text x="88.7456%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17 samples, 0.88%)</title><rect x="88.4956%" y="165" width="0.8850%" height="15" fill="rgb(252,8,32)" fg:x="1700" fg:w="17"/><text x="88.7456%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17 samples, 0.88%)</title><rect x="88.4956%" y="149" width="0.8850%" height="15" fill="rgb(223,20,43)" fg:x="1700" fg:w="17"/><text x="88.7456%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (1,459 samples, 75.95%)</title><rect x="20.8225%" y="245" width="75.9500%" height="15" fill="rgb(229,81,49)" fg:x="400" fg:w="1459"/><text x="21.0725%" y="255.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1,262 samples, 65.69%)</title><rect x="31.0776%" y="229" width="65.6950%" height="15" fill="rgb(236,28,36)" fg:x="597" fg:w="1262"/><text x="31.3276%" y="239.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>core::iter::adapters::filter::filter_fold::{{closure}} (566 samples, 29.46%)</title><rect x="67.3087%" y="213" width="29.4638%" height="15" fill="rgb(249,185,26)" fg:x="1293" fg:w="566"/><text x="67.5587%" y="223.50">core::iter::adapters::filter::filter_fold::{{cl..</text></g><g><title>ray_tracer::Camera::closest_triangle_index::{{closure}} (159 samples, 8.28%)</title><rect x="88.4956%" y="197" width="8.2769%" height="15" fill="rgb(249,174,33)" fg:x="1700" fg:w="159"/><text x="88.7456%" y="207.50">ray_tracer::..</text></g><g><title>ray_tracer::BoundingBox::fast_intersect_check (142 samples, 7.39%)</title><rect x="89.3805%" y="181" width="7.3920%" height="15" fill="rgb(233,201,37)" fg:x="1717" fg:w="142"/><text x="89.6305%" y="191.50">ray_tracer..</text></g><g><title>ray_tracer::Camera::closest_triangle_index (1,505 samples, 78.34%)</title><rect x="20.8225%" y="341" width="78.3446%" height="15" fill="rgb(221,78,26)" fg:x="400" fg:w="1505"/><text x="21.0725%" y="351.50">ray_tracer::Camera::closest_triangle_index</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,505 samples, 78.34%)</title><rect x="20.8225%" y="325" width="78.3446%" height="15" fill="rgb(250,127,30)" fg:x="400" fg:w="1505"/><text x="21.0725%" y="335.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,505 samples, 78.34%)</title><rect x="20.8225%" y="309" width="78.3446%" height="15" fill="rgb(230,49,44)" fg:x="400" fg:w="1505"/><text x="21.0725%" y="319.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,505 samples, 78.34%)</title><rect x="20.8225%" y="293" width="78.3446%" height="15" fill="rgb(229,67,23)" fg:x="400" fg:w="1505"/><text x="21.0725%" y="303.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,505 samples, 78.34%)</title><rect x="20.8225%" y="277" width="78.3446%" height="15" fill="rgb(249,83,47)" fg:x="400" fg:w="1505"/><text x="21.0725%" y="287.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,505 samples, 78.34%)</title><rect x="20.8225%" y="261" width="78.3446%" height="15" fill="rgb(215,43,3)" fg:x="400" fg:w="1505"/><text x="21.0725%" y="271.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 2.39%)</title><rect x="96.7725%" y="245" width="2.3946%" height="15" fill="rgb(238,154,13)" fg:x="1859" fg:w="46"/><text x="97.0225%" y="255.50">&lt;c..</text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (1 samples, 0.05%)</title><rect x="99.2192%" y="245" width="0.0521%" height="15" fill="rgb(219,56,2)" fg:x="1906" fg:w="1"/><text x="99.4692%" y="255.50"></text></g><g><title>ray_tracer::Camera::iterate_over_rays::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.05%)</title><rect x="99.2192%" y="229" width="0.0521%" height="15" fill="rgb(233,0,4)" fg:x="1906" fg:w="1"/><text x="99.4692%" y="239.50"></text></g><g><title>ray_tracer::BoundingBox::fast_intersect_check (1 samples, 0.05%)</title><rect x="99.2192%" y="213" width="0.0521%" height="15" fill="rgb(235,30,7)" fg:x="1906" fg:w="1"/><text x="99.4692%" y="223.50"></text></g><g><title>&lt;ray_tracer::Vector as core::ops::arith::Add&gt;::add (2 samples, 0.10%)</title><rect x="99.2712%" y="213" width="0.1041%" height="15" fill="rgb(250,79,13)" fg:x="1907" fg:w="2"/><text x="99.5212%" y="223.50"></text></g><g><title>ray_tracer::Plane::normal (1 samples, 0.05%)</title><rect x="99.3753%" y="213" width="0.0521%" height="15" fill="rgb(211,146,34)" fg:x="1909" fg:w="1"/><text x="99.6253%" y="223.50"></text></g><g><title>ray_tracer::Vector::dot_product (1 samples, 0.05%)</title><rect x="99.4274%" y="213" width="0.0521%" height="15" fill="rgb(228,22,38)" fg:x="1910" fg:w="1"/><text x="99.6774%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1,874 samples, 97.55%)</title><rect x="2.0302%" y="373" width="97.5534%" height="15" fill="rgb(235,168,5)" fg:x="39" fg:w="1874"/><text x="2.2802%" y="383.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>ray_tracer::Camera::iterate_over_rays::{{closure}} (1,513 samples, 78.76%)</title><rect x="20.8225%" y="357" width="78.7611%" height="15" fill="rgb(221,155,16)" fg:x="400" fg:w="1513"/><text x="21.0725%" y="367.50">ray_tracer::Camera::iterate_over_rays::{{closure}}</text></g><g><title>ray_tracer::Camera::iterate_over_rays::{{closure}}::{{closure}} (8 samples, 0.42%)</title><rect x="99.1671%" y="341" width="0.4164%" height="15" fill="rgb(215,215,53)" fg:x="1905" fg:w="8"/><text x="99.4171%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (8 samples, 0.42%)</title><rect x="99.1671%" y="325" width="0.4164%" height="15" fill="rgb(223,4,10)" fg:x="1905" fg:w="8"/><text x="99.4171%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.42%)</title><rect x="99.1671%" y="309" width="0.4164%" height="15" fill="rgb(234,103,6)" fg:x="1905" fg:w="8"/><text x="99.4171%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.42%)</title><rect x="99.1671%" y="293" width="0.4164%" height="15" fill="rgb(227,97,0)" fg:x="1905" fg:w="8"/><text x="99.4171%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8 samples, 0.42%)</title><rect x="99.1671%" y="277" width="0.4164%" height="15" fill="rgb(234,150,53)" fg:x="1905" fg:w="8"/><text x="99.4171%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (7 samples, 0.36%)</title><rect x="99.2192%" y="261" width="0.3644%" height="15" fill="rgb(228,201,54)" fg:x="1906" fg:w="7"/><text x="99.4692%" y="271.50"></text></g><g><title>ray_tracer::Camera::iterate_over_rays::{{closure}}::{{closure}} (6 samples, 0.31%)</title><rect x="99.2712%" y="245" width="0.3123%" height="15" fill="rgb(222,22,37)" fg:x="1907" fg:w="6"/><text x="99.5212%" y="255.50"></text></g><g><title>ray_tracer::Plane::intersection (6 samples, 0.31%)</title><rect x="99.2712%" y="229" width="0.3123%" height="15" fill="rgb(237,53,32)" fg:x="1907" fg:w="6"/><text x="99.5212%" y="239.50"></text></g><g><title>ray_tracer::Vector::scale (2 samples, 0.10%)</title><rect x="99.4794%" y="213" width="0.1041%" height="15" fill="rgb(233,25,53)" fg:x="1911" fg:w="2"/><text x="99.7294%" y="223.50"></text></g><g><title>ray_tracer::Vector::pitch (3 samples, 0.16%)</title><rect x="99.6877%" y="357" width="0.1562%" height="15" fill="rgb(210,40,34)" fg:x="1915" fg:w="3"/><text x="99.9377%" y="367.50"></text></g><g><title>ray_tracer::Radian::cos (2 samples, 0.10%)</title><rect x="99.7397%" y="341" width="0.1041%" height="15" fill="rgb(241,220,44)" fg:x="1916" fg:w="2"/><text x="99.9897%" y="351.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (2 samples, 0.10%)</title><rect x="99.7397%" y="325" width="0.1041%" height="15" fill="rgb(235,28,35)" fg:x="1916" fg:w="2"/><text x="99.9897%" y="335.50"></text></g><g><title>__sincos (2 samples, 0.10%)</title><rect x="99.7397%" y="309" width="0.1041%" height="15" fill="rgb(210,56,17)" fg:x="1916" fg:w="2"/><text x="99.9897%" y="319.50"></text></g><g><title>do_cos (2 samples, 0.10%)</title><rect x="99.7397%" y="293" width="0.1041%" height="15" fill="rgb(224,130,29)" fg:x="1916" fg:w="2"/><text x="99.9897%" y="303.50"></text></g><g><title>ray_tracer::Scene::render_to_output (1,913 samples, 99.58%)</title><rect x="0.3644%" y="597" width="99.5836%" height="15" fill="rgb(235,212,8)" fg:x="7" fg:w="1913"/><text x="0.6144%" y="607.50">ray_tracer::Scene::render_to_output</text></g><g><title>ray_tracer::Scene::iterate_over_rays (1,881 samples, 97.92%)</title><rect x="2.0302%" y="581" width="97.9178%" height="15" fill="rgb(223,33,50)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="591.50">ray_tracer::Scene::iterate_over_rays</text></g><g><title>ray_tracer::Camera::iterate_over_rays (1,881 samples, 97.92%)</title><rect x="2.0302%" y="565" width="97.9178%" height="15" fill="rgb(219,149,13)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="575.50">ray_tracer::Camera::iterate_over_rays</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,881 samples, 97.92%)</title><rect x="2.0302%" y="549" width="97.9178%" height="15" fill="rgb(250,156,29)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="559.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,881 samples, 97.92%)</title><rect x="2.0302%" y="533" width="97.9178%" height="15" fill="rgb(216,193,19)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="543.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,881 samples, 97.92%)</title><rect x="2.0302%" y="517" width="97.9178%" height="15" fill="rgb(216,135,14)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="527.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,881 samples, 97.92%)</title><rect x="2.0302%" y="501" width="97.9178%" height="15" fill="rgb(241,47,5)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="511.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,881 samples, 97.92%)</title><rect x="2.0302%" y="485" width="97.9178%" height="15" fill="rgb(233,42,35)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="495.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,881 samples, 97.92%)</title><rect x="2.0302%" y="469" width="97.9178%" height="15" fill="rgb(231,13,6)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="479.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,881 samples, 97.92%)</title><rect x="2.0302%" y="453" width="97.9178%" height="15" fill="rgb(207,181,40)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="463.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,881 samples, 97.92%)</title><rect x="2.0302%" y="437" width="97.9178%" height="15" fill="rgb(254,173,49)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="447.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,881 samples, 97.92%)</title><rect x="2.0302%" y="421" width="97.9178%" height="15" fill="rgb(221,1,38)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="431.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,881 samples, 97.92%)</title><rect x="2.0302%" y="405" width="97.9178%" height="15" fill="rgb(206,124,46)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="415.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1,881 samples, 97.92%)</title><rect x="2.0302%" y="389" width="97.9178%" height="15" fill="rgb(249,21,11)" fg:x="39" fg:w="1881"/><text x="2.2802%" y="399.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>ray_tracer::Camera::iterate_over_rays::{{closure}} (7 samples, 0.36%)</title><rect x="99.5836%" y="373" width="0.3644%" height="15" fill="rgb(222,201,40)" fg:x="1913" fg:w="7"/><text x="99.8336%" y="383.50"></text></g><g><title>ray_tracer::Vector::yaw (2 samples, 0.10%)</title><rect x="99.8438%" y="357" width="0.1041%" height="15" fill="rgb(235,61,29)" fg:x="1918" fg:w="2"/><text x="100.0938%" y="367.50"></text></g><g><title>ray_tracer::Radian::cos (1 samples, 0.05%)</title><rect x="99.8959%" y="341" width="0.0521%" height="15" fill="rgb(219,207,3)" fg:x="1919" fg:w="1"/><text x="100.1459%" y="351.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (1 samples, 0.05%)</title><rect x="99.8959%" y="325" width="0.0521%" height="15" fill="rgb(222,56,46)" fg:x="1919" fg:w="1"/><text x="100.1459%" y="335.50"></text></g><g><title>all (1,921 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="1921"/><text x="0.2500%" y="831.50"></text></g><g><title>ray_tracer (1,915 samples, 99.69%)</title><rect x="0.3123%" y="805" width="99.6877%" height="15" fill="rgb(231,124,27)" fg:x="6" fg:w="1915"/><text x="0.5623%" y="815.50">ray_tracer</text></g><g><title>_start (1,915 samples, 99.69%)</title><rect x="0.3123%" y="789" width="99.6877%" height="15" fill="rgb(249,195,6)" fg:x="6" fg:w="1915"/><text x="0.5623%" y="799.50">_start</text></g><g><title>__libc_start_main (1,914 samples, 99.64%)</title><rect x="0.3644%" y="773" width="99.6356%" height="15" fill="rgb(237,174,47)" fg:x="7" fg:w="1914"/><text x="0.6144%" y="783.50">__libc_start_main</text></g><g><title>main (1,914 samples, 99.64%)</title><rect x="0.3644%" y="757" width="99.6356%" height="15" fill="rgb(206,201,31)" fg:x="7" fg:w="1914"/><text x="0.6144%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (1,914 samples, 99.64%)</title><rect x="0.3644%" y="741" width="99.6356%" height="15" fill="rgb(231,57,52)" fg:x="7" fg:w="1914"/><text x="0.6144%" y="751.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,914 samples, 99.64%)</title><rect x="0.3644%" y="725" width="99.6356%" height="15" fill="rgb(248,177,22)" fg:x="7" fg:w="1914"/><text x="0.6144%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,914 samples, 99.64%)</title><rect x="0.3644%" y="709" width="99.6356%" height="15" fill="rgb(215,211,37)" fg:x="7" fg:w="1914"/><text x="0.6144%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,914 samples, 99.64%)</title><rect x="0.3644%" y="693" width="99.6356%" height="15" fill="rgb(241,128,51)" fg:x="7" fg:w="1914"/><text x="0.6144%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,914 samples, 99.64%)</title><rect x="0.3644%" y="677" width="99.6356%" height="15" fill="rgb(227,165,31)" fg:x="7" fg:w="1914"/><text x="0.6144%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,914 samples, 99.64%)</title><rect x="0.3644%" y="661" width="99.6356%" height="15" fill="rgb(228,167,24)" fg:x="7" fg:w="1914"/><text x="0.6144%" y="671.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,914 samples, 99.64%)</title><rect x="0.3644%" y="645" width="99.6356%" height="15" fill="rgb(228,143,12)" fg:x="7" fg:w="1914"/><text x="0.6144%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,914 samples, 99.64%)</title><rect x="0.3644%" y="629" width="99.6356%" height="15" fill="rgb(249,149,8)" fg:x="7" fg:w="1914"/><text x="0.6144%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>ray_tracer::main (1,914 samples, 99.64%)</title><rect x="0.3644%" y="613" width="99.6356%" height="15" fill="rgb(243,35,44)" fg:x="7" fg:w="1914"/><text x="0.6144%" y="623.50">ray_tracer::main</text></g><g><title>ray_tracer::parse_input (1 samples, 0.05%)</title><rect x="99.9479%" y="597" width="0.0521%" height="15" fill="rgb(246,89,9)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.05%)</title><rect x="99.9479%" y="581" width="0.0521%" height="15" fill="rgb(233,213,13)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="99.9479%" y="565" width="0.0521%" height="15" fill="rgb(233,141,41)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="99.9479%" y="549" width="0.0521%" height="15" fill="rgb(239,167,4)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="99.9479%" y="533" width="0.0521%" height="15" fill="rgb(209,217,16)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.05%)</title><rect x="99.9479%" y="517" width="0.0521%" height="15" fill="rgb(219,88,35)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="99.9479%" y="501" width="0.0521%" height="15" fill="rgb(220,193,23)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.05%)</title><rect x="99.9479%" y="485" width="0.0521%" height="15" fill="rgb(230,90,52)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="495.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.05%)</title><rect x="99.9479%" y="469" width="0.0521%" height="15" fill="rgb(252,106,19)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="479.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.05%)</title><rect x="99.9479%" y="453" width="0.0521%" height="15" fill="rgb(206,74,20)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="463.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.05%)</title><rect x="99.9479%" y="437" width="0.0521%" height="15" fill="rgb(230,138,44)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="447.50"></text></g><g><title>_int_realloc (1 samples, 0.05%)</title><rect x="99.9479%" y="421" width="0.0521%" height="15" fill="rgb(235,182,43)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="431.50"></text></g><g><title>_int_malloc (1 samples, 0.05%)</title><rect x="99.9479%" y="405" width="0.0521%" height="15" fill="rgb(242,16,51)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9479%" y="389" width="0.0521%" height="15" fill="rgb(248,9,4)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9479%" y="373" width="0.0521%" height="15" fill="rgb(210,31,22)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9479%" y="357" width="0.0521%" height="15" fill="rgb(239,54,39)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9479%" y="341" width="0.0521%" height="15" fill="rgb(230,99,41)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9479%" y="325" width="0.0521%" height="15" fill="rgb(253,106,12)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9479%" y="309" width="0.0521%" height="15" fill="rgb(213,46,41)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9479%" y="293" width="0.0521%" height="15" fill="rgb(215,133,35)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9479%" y="277" width="0.0521%" height="15" fill="rgb(213,28,5)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9479%" y="261" width="0.0521%" height="15" fill="rgb(215,77,49)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.9479%" y="245" width="0.0521%" height="15" fill="rgb(248,100,22)" fg:x="1920" fg:w="1"/><text x="100.1979%" y="255.50"></text></g></svg></svg>